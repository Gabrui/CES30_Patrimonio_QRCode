<h1>Leitura do QR Code:</h1>


<div>
    <video muted autoplay playsinline id="qr-video"></video>
    <canvas id="debug-canvas"></canvas>
</div>

<p>
Escaneie uma imagem pela câmera ou clique no ícone do QR Code e tire uma foto.
</p>

<input type="text" class="qrcode-text" id="cam-qr-result" size=32 placeholder="Código"><label class="qrcode-text-btn">
  <input type="file" id="file-selector" accept="image/*" capture=environment tabindex=-1>
</label>

<span id="file-qr-result"> </span>

<script type="module">
    import QrScanner from "../qr-scanner.min.js";
    const video = document.getElementById('qr-video');
    const debugCanvas = document.getElementById('debug-canvas');
    const debugCanvasContext = debugCanvas.getContext('2d');
    const camQrResult = document.getElementById('cam-qr-result');
    const fileSelector = document.getElementById('file-selector');
    const fileQrResult = document.getElementById('file-qr-result');

    function setResultado(label, result) {
        label.value = result;
        scanner.stop();
        debugCanvas.style.display = "none";
        fileQrResult.textContent = "";
    }

    function setResult(label, result) {
        label.value = result;
        fileQrResult.textContent = "";
    }

    function erro(resposta) {
        fileQrResult.textContent = resposta;
    }

    // ####### File Scanning #######
    fileSelector.addEventListener('change', event => {
        const file = fileSelector.files[0];
        if (!file) {
            return;
        }
        QrScanner.scanImage(file)
            .then(result => setResult(camQrResult, result))
            .catch(e => erro(e));
    });

    const scanner = new QrScanner(video, result => setResultado(camQrResult, result));
    scanner.start();

    setDebugMode(true);
    function setDebugMode(isDebug) {
        const worker = scanner._qrWorker;
        worker.postMessage({
            type: 'setDebug',
            data: isDebug
        });
        if (isDebug) {
            debugCanvas.style.display = 'block';
            worker.addEventListener('message', handleDebugImage);
        } else {
            debugCanvas.style.display = 'none';
            worker.removeEventListener('message', handleDebugImage);
        }
    }
    function handleDebugImage(event) {
        const type = event.data.type;
        if (type === 'debugImage') {
            const imageData = event.data.data;
            if (debugCanvas.width !== imageData.width || debugCanvas.height !== imageData.height) {
                debugCanvas.width = imageData.width;
                debugCanvas.height = imageData.height;
            }
            debugCanvasContext.putImageData(imageData, 0, 0);
        }
    }

    //setResultado(camQrResult, 'oi');
</script>